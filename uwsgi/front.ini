##
# uWSGI configuration for udata frontend
# Este ficheiro é para a sua aplicação web frontend.
# O seu objetivo é servir as páginas web e as requisições API.
# Para que a aplicação possa atender a múltiplos utilizadores ao mesmo tempo,
# é necessário ter vários processos em execução.
##

[uwsgi]
; Ativa o modo mestre para gerenciar os workers.
master = true
; Define o número de processos de worker que irão atender às requisições.
processes = 4
; Define o número de threads por processo, para lidar com requisições concorrentes.
threads = 2

; Configuração de Python / Ambiente
; Especifica o módulo Python a ser carregado (o ponto de entrada da sua aplicação).
module = udata.wsgi
; O objeto dentro do módulo que representa a aplicação.
callable = app
; Define a variável de ambiente para o ficheiro de configuração do uData.
env = UDATA_SETTINGS=/udata/udata.cfg

; Manuseio de ficheiros estáticos
; Verifica se os ficheiros estáticos existem antes de servi-los.
check-static = /udata/public
; Mapeia URLs para diretórios de ficheiros estáticos (e.g., /s/style.css -> /udata/fs/style.css).
static-map = /s=/udata/fs

; Threads para lidar com tarefas offload
; Define o número de threads para descarregar tarefas para processamento em segundo plano.
offload-threads = 4

; Configuração de soquete
; O endereço e a porta onde o uWSGI irá ouvir por requisições HTTP.
socket = 0.0.0.0:7000
; O endereço e a porta para aceder às estatísticas do uWSGI.
stats = 0.0.0.0:7001

; Suporte assíncrono com Gevent
; Habilita o modo assíncrono Gevent para lidar com mais conexões.
gevent = 10

; Tamanho do buffer para cabeçalhos
; Este parâmetro causa: erro uwsgi_proto_uwsgi_parser(): File exists [proto/uwsgi.c line 40]
; Define o tamanho do buffer para os cabeçalhos das requisições.
buffer-size = 32768 ; 32 KB

; Habilitar threads (necessário para Sentry)
; Habilita o suporte a threads em workers para certas bibliotecas.
enable-threads = true

; Desabilitar log de requisições
; Desativa o log de requisições individuais para evitar logs excessivos.
disable-logging = true

; Gestão e reciclagem de workers
; Recicla workers após 10,000 requisições para evitar vazamentos de memória.
max-requests = 10000
; Recarrega o worker se a memória virtual exceder 1024 MB.
reload-on-as = 1024
; Recarrega o worker se a memória física (RSS) exceder 512 MB.
reload-on-rss = 512
; Limita o total de memória virtual a 2 GB por worker.
limit-as = 2048 ; 2GB
; Garante que os workers órfãos são terminados.
no-orphans = true
; Limpa ficheiros de soquete e PID quando o uWSGI é encerrado.
vacuum = true
; Força o uWSGI a sair em caso de sinal de término, em vez de recarregar.
die-on-term = true
; Período de espera para workers encerrarem antes de serem forçados a sair.
reload-mercy = 60

; Configurações Harakiri (tratamento de tempo limite)
; Encerra workers que demoram mais de 60 segundos a responder a uma requisição.
harakiri = 60
; Define um tempo limite de 120 segundos para todas as rotas (exceto as que têm a sua própria rota).
route-run = harakiri:120
; Define um tempo limite de 600 segundos especificamente para requisições de ficheiros .csv.
route = \.csv$ harakiri:600

; Modo de interpretador único
; Garante que todos os workers usam um único interpretador Python.
single-interpreter = true

; Configuração de log
; Define o nível de detalhe dos logs.
log-level = debug
; Permite que o mestre do uWSGI escreva logs.
log-master = true
; Inicia o uWSGI como um daemon e redireciona os logs para este ficheiro.
daemonize = /logs/app.logs
; Redireciona logs específicos para este ficheiro.
logto = /logs/uwsgi.log
; Regista erros HTTP 5xx no log.
log-5xx = true